name: "ubuntu Python package"

on:
  push:
    branches: [ master ]
  schedule:
      - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month

jobs:

  build:
    name: "build ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      sourcecode: "lesson1/iterations/BinaryGap.py"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      - name: "Run BinaryGap"
        run: python ${sourcecode}
      - name: "Run LogParser"
        run: python fileoperations/LogParser.py
        #https://en.wikipedia.org/wiki/Random_password_generator
        #A variety of methods exist for generating strong, cryptographically secure random passwords. On Unix platforms
        #/dev/random and /dev/urandom are commonly used, either programmatically or in conjunction with a program such as makepasswd
      - name: "cryptographically secure random passwords - bash"
        run: |
          #uses /dev/urandom to generate a password
          #This function takes password length as a parameter, or uses 16 by default
          #function mkpw() { LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c ${1:-16}; echo; }
          #outputs the top 32
          < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;
          #in reverse
          tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1
          strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
          < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c6
          dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64 -w 0 | rev | cut -b 2- | rev
          #outputs 32
          openssl rand -base64 32

  test:
    name: "Test with pytest ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      sourcecode: "lesson1/iterations/BinaryGap.py"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade
          pip install -r requirements.txt
      - name: "Test with pytest"
        run: |
          pytest tests.py --doctest-modules --junitxml=junit/test-results.xml \
            --cov=com --cov-report=xml --cov-report=html